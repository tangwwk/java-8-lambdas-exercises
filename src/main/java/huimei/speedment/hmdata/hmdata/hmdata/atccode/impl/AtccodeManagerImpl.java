package huimei.speedment.hmdata.hmdata.hmdata.atccode.impl;

import com.speedment.Speedment;
import com.speedment.config.Column;
import com.speedment.config.Table;
import com.speedment.config.mapper.TypeMapper;
import com.speedment.exception.SpeedmentException;
import com.speedment.internal.core.config.mapper.identity.IntegerIdentityMapper;
import com.speedment.internal.core.config.mapper.identity.StringIdentityMapper;
import com.speedment.internal.core.manager.sql.AbstractSqlManager;
import huimei.speedment.hmdata.hmdata.hmdata.atccode.Atccode;
import java.sql.ResultSet;
import java.sql.SQLException;
import javax.annotation.Generated;

/**
 * A manager implementation representing an entity (for example, a row) in
 * the com.speedment.internal.ui.config.TableProperty@7f4ab589.
 * <p>
 * This Class or Interface has been automatically generated by Speedment. Any
 * changes made to this Class or Interface will be overwritten.
 * 
 * @author Speedment
 */
@Generated("Speedment")
public class AtccodeManagerImpl extends AbstractSqlManager<Atccode> {
    
    private final TypeMapper<Integer, Integer> idTypeMapper = new IntegerIdentityMapper();
    private final TypeMapper<String, String> atcCodeTypeMapper = new StringIdentityMapper();
    private final TypeMapper<String, String> nameTypeMapper = new StringIdentityMapper();
    private final TypeMapper<String, String> enNameTypeMapper = new StringIdentityMapper();
    private final TypeMapper<Integer, Integer> pageTypeMapper = new IntegerIdentityMapper();
    
    public AtccodeManagerImpl(Speedment speedment) {
        super(speedment);
        setSqlEntityMapper(this::defaultReadEntity);
    }
    
    @Override
    public Class<Atccode> getEntityClass() {
        return Atccode.class;
    }
    
    @Override
    public Object get(Atccode entity, Column column) {
        switch (column.getName()) {
            case "id" : return entity.getId();
            case "atc_code" : return entity.getAtcCode();
            case "name" : return entity.getName();
            case "en_name" : return entity.getEnName();
            case "page" : return entity.getPage();
            default : throw new IllegalArgumentException("Unknown column '" + column.getName() + "'.");
        }
    }
    
    @Override
    public void set(Atccode entity, Column column, Object value) {
        switch (column.getName()) {
            case "id" : entity.setId((Integer) value); break;
            case "atc_code" : entity.setAtcCode((String) value); break;
            case "name" : entity.setName((String) value); break;
            case "en_name" : entity.setEnName((String) value); break;
            case "page" : entity.setPage((Integer) value); break;
            default : throw new IllegalArgumentException("Unknown column '" + column.getName() + "'.");
        }
    }
    
    @Override
    public Table getTable() {
        return speedment.getProjectComponent().getProject().findTableByName("hmdata.hmdata.atccode");
    }
    
    protected Atccode defaultReadEntity(ResultSet resultSet) {
        final Atccode entity = newInstance();
        try {
            entity.setId(idTypeMapper.toJavaType(resultSet.getInt(1)));
            entity.setAtcCode(atcCodeTypeMapper.toJavaType(resultSet.getString(2)));
            entity.setName(nameTypeMapper.toJavaType(resultSet.getString(3)));
            entity.setEnName(enNameTypeMapper.toJavaType(resultSet.getString(4)));
            entity.setPage(pageTypeMapper.toJavaType(getInt(resultSet, 5)));
        }
        catch (SQLException sqle) {
            throw new SpeedmentException(sqle);
        }
        return entity;
    }
    
    @Override
    public Atccode newInstance() {
        return new AtccodeImpl(speedment);
    }
    
    @Override
    public Integer primaryKeyFor(Atccode entity) {
        return entity.getId();
    }
}