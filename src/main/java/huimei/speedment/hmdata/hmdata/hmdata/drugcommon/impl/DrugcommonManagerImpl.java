package huimei.speedment.hmdata.hmdata.hmdata.drugcommon.impl;

import com.speedment.Speedment;
import com.speedment.config.Column;
import com.speedment.config.Table;
import com.speedment.config.mapper.TypeMapper;
import com.speedment.exception.SpeedmentException;
import com.speedment.internal.core.config.mapper.identity.IntegerIdentityMapper;
import com.speedment.internal.core.config.mapper.identity.StringIdentityMapper;
import com.speedment.internal.core.manager.sql.AbstractSqlManager;
import huimei.speedment.hmdata.hmdata.hmdata.drugcommon.Drugcommon;
import java.sql.ResultSet;
import java.sql.SQLException;
import javax.annotation.Generated;

/**
 * A manager implementation representing an entity (for example, a row) in
 * the com.speedment.internal.ui.config.TableProperty@32e54412.
 * <p>
 * This Class or Interface has been automatically generated by Speedment. Any
 * changes made to this Class or Interface will be overwritten.
 * 
 * @author Speedment
 */
@Generated("Speedment")
public class DrugcommonManagerImpl extends AbstractSqlManager<Drugcommon> {
    
    private final TypeMapper<Integer, Integer> idTypeMapper = new IntegerIdentityMapper();
    private final TypeMapper<String, String> commonNameTypeMapper = new StringIdentityMapper();
    private final TypeMapper<String, String> engNameTypeMapper = new StringIdentityMapper();
    private final TypeMapper<String, String> vsNameTypeMapper = new StringIdentityMapper();
    private final TypeMapper<String, String> fdaTypeMapper = new StringIdentityMapper();
    private final TypeMapper<String, String> typeTypeMapper = new StringIdentityMapper();
    private final TypeMapper<Integer, Integer> otcTypeMapper = new IntegerIdentityMapper();
    private final TypeMapper<String, String> innComponentNameTypeMapper = new StringIdentityMapper();
    private final TypeMapper<String, String> atcCodeTypeMapper = new StringIdentityMapper();
    private final TypeMapper<String, String> cateIdTypeMapper = new StringIdentityMapper();
    private final TypeMapper<Integer, Integer> classIdTypeMapper = new IntegerIdentityMapper();
    private final TypeMapper<String, String> classNameTypeMapper = new StringIdentityMapper();
    private final TypeMapper<String, String> productClassTypeMapper = new StringIdentityMapper();
    
    public DrugcommonManagerImpl(Speedment speedment) {
        super(speedment);
        setSqlEntityMapper(this::defaultReadEntity);
    }
    
    @Override
    public Class<Drugcommon> getEntityClass() {
        return Drugcommon.class;
    }
    
    @Override
    public Object get(Drugcommon entity, Column column) {
        switch (column.getName()) {
            case "id" : return entity.getId();
            case "common_name" : return entity.getCommonName();
            case "eng_name" : return entity.getEngName();
            case "vs_name" : return entity.getVsName();
            case "fda" : return entity.getFda();
            case "type" : return entity.getType();
            case "otc" : return entity.getOtc();
            case "inn_component_name" : return entity.getInnComponentName();
            case "atc_code" : return entity.getAtcCode();
            case "cate_id" : return entity.getCateId();
            case "class_id" : return entity.getClassId();
            case "class_name" : return entity.getClassName();
            case "product_class" : return entity.getProductClass();
            default : throw new IllegalArgumentException("Unknown column '" + column.getName() + "'.");
        }
    }
    
    @Override
    public void set(Drugcommon entity, Column column, Object value) {
        switch (column.getName()) {
            case "id" : entity.setId((Integer) value); break;
            case "common_name" : entity.setCommonName((String) value); break;
            case "eng_name" : entity.setEngName((String) value); break;
            case "vs_name" : entity.setVsName((String) value); break;
            case "fda" : entity.setFda((String) value); break;
            case "type" : entity.setType((String) value); break;
            case "otc" : entity.setOtc((Integer) value); break;
            case "inn_component_name" : entity.setInnComponentName((String) value); break;
            case "atc_code" : entity.setAtcCode((String) value); break;
            case "cate_id" : entity.setCateId((String) value); break;
            case "class_id" : entity.setClassId((Integer) value); break;
            case "class_name" : entity.setClassName((String) value); break;
            case "product_class" : entity.setProductClass((String) value); break;
            default : throw new IllegalArgumentException("Unknown column '" + column.getName() + "'.");
        }
    }
    
    @Override
    public Table getTable() {
        return speedment.getProjectComponent().getProject().findTableByName("hmdata.hmdata.drugcommon");
    }
    
    protected Drugcommon defaultReadEntity(ResultSet resultSet) {
        final Drugcommon entity = newInstance();
        try {
            entity.setId(idTypeMapper.toJavaType(resultSet.getInt(1)));
            entity.setCommonName(commonNameTypeMapper.toJavaType(resultSet.getString(2)));
            entity.setEngName(engNameTypeMapper.toJavaType(resultSet.getString(3)));
            entity.setVsName(vsNameTypeMapper.toJavaType(resultSet.getString(4)));
            entity.setFda(fdaTypeMapper.toJavaType(resultSet.getString(5)));
            entity.setType(typeTypeMapper.toJavaType(resultSet.getString(6)));
            entity.setOtc(otcTypeMapper.toJavaType(resultSet.getInt(7)));
            entity.setInnComponentName(innComponentNameTypeMapper.toJavaType(resultSet.getString(8)));
            entity.setAtcCode(atcCodeTypeMapper.toJavaType(resultSet.getString(9)));
            entity.setCateId(cateIdTypeMapper.toJavaType(resultSet.getString(10)));
            entity.setClassId(classIdTypeMapper.toJavaType(getInt(resultSet, 11)));
            entity.setClassName(classNameTypeMapper.toJavaType(resultSet.getString(12)));
            entity.setProductClass(productClassTypeMapper.toJavaType(resultSet.getString(13)));
        }
        catch (SQLException sqle) {
            throw new SpeedmentException(sqle);
        }
        return entity;
    }
    
    @Override
    public Drugcommon newInstance() {
        return new DrugcommonImpl(speedment);
    }
    
    @Override
    public Integer primaryKeyFor(Drugcommon entity) {
        return entity.getId();
    }
}